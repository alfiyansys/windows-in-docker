#!/usr/bin/env python3

from argparse import ArgumentParser, Namespace
from multiprocessing import cpu_count
from os import popen
from subprocess import run
from typing import Tuple
from uuid import uuid4


_vmdk_dir_ = "/config"
_sound_ = "hda"
_lan_ = ""
_bridge_ = ""


def console_size() -> Tuple[int, int]:
  try:
    with popen("stty size", "r") as fd:
      rows, cols = [int(chars) for chars in fd.read().split()]
      return rows, cols
  except:
    return -1, -1


def pprn(msg, err=False, before="", after="", centre=False) -> None:
  _, cols = console_size()
  ml = len(msg)
  cols = 20 if cols == -1 else cols
  padding = 0 if not centre or ml > cols else int((cols - ml) / 2)
  msg = f"{before * cols}\n{' ' * padding}{msg}\n{after * cols}"
  print(msg)


def parse() -> Namespace:
  parser = ArgumentParser()

  parser.add_argument("-d", "--dry", action="store_true")
  parser.add_argument("-n", "--name", required=True)
  parser.add_argument("-c", "--cpus", default=cpu_count())
  parser.add_argument("-m", "--memory", default=4000)
  parser.add_argument("-s", "--disk-size", default=100)

  parser.add_argument("--vram", default=256000)
  parser.add_argument("--bios", action="store_true", default=False)

  parser.add_argument("--install-media", required=True)
  parser.add_argument("--install-drivers", required=True)
  parser.add_argument("--extra", default="")

  return parser.parse_args()


def install(args: Namespace) -> str:
  vmdk = f"{_vmdk_dir_}/{args.name}.img"
  lan = ""
  bridge = ""
  return f"""
    virt-install
    {"" if args.bios else "--boot uefi"}
    --noautoconsole
    --features kvm_hidden=on
    --virt-type kvm
    --os-variant=win10
    --vcpus {args.cpus},sockets=1
    --memory {args.memory}
    --controller type=scsi,model=virtio-scsi
    --disk path={vmdk},size={args.disk_size},format=raw,sparse=true,bus=scsi,discard=unmap,io=threads,cache=none
    --network {lan},model=virtio
    --network bridge={bridge},model=virtio
    --graphics vnc,listen=0.0.0.0
    --video qxl,ram={args.vram}
    --channel unix,target_type=virtio,name=org.qemu.guest_agent.0
    --disk {args.install_media},device=cdrom
    --disk {args.install_drivers},device=cdrom
    --qemu-commandline="-soundhw"
    --qemu-commandline="{_sound_}"
    --qemu-commandline="-uuid"
    --qemu-commandline="{uuid4()}"
    --name {args.name}
    --check disk_size=off
    {args.extra}
    {"--print-xml --dry-run" if args.dry else ""}
    """


def main() -> None:
  args = parse()
  cmd = install(args)
  print(args)
