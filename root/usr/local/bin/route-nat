#!/usr/bin/env python3

from enum import Enum
from argparse import ArgumentParser, Namespace
from ipaddress import IPv4Address, ip_address
from os import environ
from subprocess import run
from typing import List


class State(Enum):
  on = "on"
  off = "off"


def call(prog: str, *args: List[str]) -> bytes:
  ret = run([prog, *args])
  if ret.returncode != 0:
    exit(ret.returncode)


def parse_args() -> Namespace:
  parser = ArgumentParser()
  parser.add_argument("--bridge", required=True)
  parser.add_argument("--ip", required=True, type=ip_address)
  parser.add_argument("--state", required=True,
                      choices=(State.on, State.off), type=State)
  return parser.parse_args()


def ip_table(bridge: str, ip: IPv4Address, port: int, state: State) -> None:
  action = "--append" if state == State.on else "--delete"

  chain1 = ("iptables",
            "--table", "filter",
            action, "FORWARD",
            "--protocol", "all",
            "--jump", "ACCEPT",
            "--out-interface", bridge,
            "--destination", str(ip),
            "--destination-port", str(port))

  chain2 = ("iptables",
            "--table", "nat",
            action, "PREROUTING",
            "--protocol", "all",
            "--jump", "DNAT",
            "--out-interface", bridge,
            "--to-destination", f"{ip}:{port}",
            "--destination-port", str(port))

  call(*chain1)
  call(*chain2)


def main() -> None:
  args = parse_args()
  for i in range(1, 65001):
    ip_table(
        port=i,
        bridge=args.bridge,
        ip=args.ip,
        state=args.state)


main()

