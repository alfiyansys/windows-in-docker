#!/usr/bin/env python3

from enum import Enum
from argparse import ArgumentParser, Namespace
from ipaddress import IPv4Address, IPv4Network, ip_address, ip_network
from os import environ
from subprocess import run
from typing import List, Iterable, Tuple


class State(Enum):
  on = "on"
  off = "off"


def call(prog: str, *args: List[str]) -> bytes:
  ret = run([prog, *args])
  if ret.returncode != 0:
    exit(ret.returncode)


def parse_args() -> Namespace:
  parser = ArgumentParser()
  parser.add_argument("--bridge", required=True)
  parser.add_argument("--ip", required=True, type=ip_address)
  parser.add_argument("--network", required=True, type=ip_network)
  parser.add_argument("--state", required=True,
                      choices=(State.on, State.off), type=State)
  return parser.parse_args()


def iptables1(bridge: str, network: IPv4Network, state: State) -> None:
  action = "--insert" if state == State.on else "--delete"

  def chain1() -> Iterable[str]:
    return ("iptables",
            "--table", "filter",
            action, "FORWARD", "1",
            "--out-interface", bridge,
            "--match", "state",
            "--source", f"!{network}",
            "--destination", str(network),
            "--state", "NEW,RELATED,ESTABLISHED",
            "--jump", "ACCEPT")

  call(*chain1())


def iptables2(ip: IPv4Address, state: State, port_range: Tuple[int, int]) -> None:
  action = "--insert" if state == State.on else "--delete"
  lo, hi = port_range

  def chain2(protocol: str) -> Iterable[str]:
    return ("iptables",
            "--table", "nat",
            action, "PREROUTING",
            "--protocol", protocol,
            "--destination", str(ip),
            "--destination-port", f"{lo}:{hi}",
            "--jump", "DNAT",
            "--to", f"{ip}:{lo}-{hi}")

  call(*chain2("tcp"))
  call(*chain2("udp"))


def main() -> None:
  args = parse_args()
  ranges = [(1, 52),
            (54, 66),
            (69, 65000)]
  iptables1(bridge=args.bridge,
            network=args.network,
            state=args.state)
  for port_range in ranges:
    iptables2(ip=args.ip,
              state=args.state,
              port_range=port_range)


main()

