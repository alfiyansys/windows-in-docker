#!/usr/bin/env python3

from argparse import ArgumentParser, Namespace
from multiprocessing import cpu_count
from os import chdir, environ, popen
from os.path import isfile, join
from shutil import get_terminal_size
from subprocess import PIPE, run
from sys import stderr
from typing import List, Tuple
from uuid import uuid4
from xml.dom import minidom


_install_dir_ = "install"
_drivers_ = join("drivers", "virtio-win.iso")
_vmdk_dir_ = "config"


def bold_print(message: str, sep="-") -> None:
  _, cols = get_terminal_size()
  print(sep * cols, file=stderr)
  print(message)
  print(sep * cols, file=stderr)


def spit(path: str, text: str) -> None:
  with open(path, "w") as fd:
    fd.write(text)


def parse() -> Namespace:
  parser = ArgumentParser()

  parser.add_argument("-d", "--dry-run", action="store_true")
  parser.add_argument("-c", "--cpus", default=cpu_count())
  parser.add_argument("-m", "--memory", default=4000)
  parser.add_argument("-s", "--size", default=100)

  parser.add_argument("--vram", default=256000)
  parser.add_argument("--bios", action="store_true", default=False)

  parser.add_argument("--install-media", default="windows.iso")
  parser.add_argument("--extra", default="")

  return parser.parse_args()


def install(name, args: Namespace, vmdk: str) -> List[str]:
  net_nat = f"--network network={environ['VIRT_NAT_NAME']},model=virtio"
  net_macvtap = ""
  if environ["VIRT_MACVTAP_IF"]:
    net_macvtap = f"--network network={environ['VIRT_NAT_NAME']},model=virtio"
  media = join(_install_dir_, args.install_media)
  return f"""
    virt-install
    --boot {"cdrom,hd" if args.bios else "uefi"}
    --virt-type kvm
    --os-variant=win10
    --vcpus {args.cpus},sockets=1
    --cpu host-passthrough
    --memory {args.memory}
    --controller type=scsi,model=virtio-scsi
    --disk path={vmdk},size={args.size},format=raw,sparse=true,bus=scsi,discard=unmap,io=threads,cache=none
    {net_nat}
    {net_macvtap}
    --graphics vnc,listen=0.0.0.0
    --video qxl,ram={args.vram}
    --channel unix,target_type=virtio,name=org.qemu.guest_agent.0
    --disk {media},device=cdrom
    --disk {_drivers_},device=cdrom
    --qemu-commandline="-uuid"
    --qemu-commandline="{uuid4()}"
    --name {name}
    --check disk_size=off
    {args.extra}
    {"--print-xml --dry-run" if args.dry_run else ""}
    """


def post_process_xml(data: str) -> str:
  try:
    dom = minidom.parseString(data)
    for disk in dom.getElementsByTagName("disk"):
      device: str = disk.getAttribute("device")
      if device == "cdrom":
        for source in disk.getElementsByTagName("source"):
          rom: str = source.getAttribute("file")
          if rom.startswith(join("/", _install_dir_)):
            disk.parentNode.removeChild(disk)
    xml = dom.toxml()
    return xml
  except:
    return data


def main() -> None:
  chdir("/")
  print("\n" * 10)
  name = environ["VM_NAME"]
  try:
    args = parse()
    vmdk = join(_vmdk_dir_, f"{name}.img")
    vmrc = join(_vmdk_dir_, f"{name}.xml")
    if isfile(vmdk) or isfile(vmrc):
      print(f"ERROR :: {name} already exists!", file=stderr)
      exit(1)
    else:
      cmd = install(name, args, vmdk)
      run(cmd.split())
      ret = run(["virsh", "dumpxml", name], stdout=PIPE)
      if ret.returncode != 0:
        bold_print("!! ERROR ^^^^")
      else:
        data = ret.stdout.decode()
        xml = post_process_xml(data)
        spit(vmrc, xml)
        bold_print(xml)
        bold_print(f"Dumped libvirt config -- {vmrc}")
  except:
    raise
  finally:
    print("\n" * 10)


main()

