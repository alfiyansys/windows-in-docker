#!/usr/bin/env python3

from argparse import ArgumentParser, Namespace
from multiprocessing import cpu_count
from os import chdir, environ, popen
from os.path import isfile
from subprocess import run
from sys import stderr
from typing import List, Tuple
from uuid import uuid4


_install_dir_ = "/install"
_vmdk_dir_ = "/config"


def call(args: List[str], capture=False) -> str:
  ret = run(args, capture_output=capture)
  if ret.returncode != 0:
    exit(ret.returncode)
  return ret.stdout.decode()


def parse() -> Namespace:
  parser = ArgumentParser()

  parser.add_argument("-d", "--dry", action="store_true")
  parser.add_argument("-c", "--cpus", default=cpu_count())
  parser.add_argument("-m", "--memory", default=4000)
  parser.add_argument("-s", "--disk-size", default=100)

  parser.add_argument("--vram", default=256000)
  parser.add_argument("--bios", action="store_true", default=False)

  parser.add_argument("-n", "--name", default=environ["VM_NAME"])
  parser.add_argument(
      "--install-media", default=f"{_install_dir_}/windows.iso")
  parser.add_argument("--install-drivers",
                      default=f"{_install_dir_}/drivers.iso")
  parser.add_argument("--extra", default="")

  return parser.parse_args()


def install(args: Namespace, vmdk: str) -> List[str]:
  br = environ["VIRTBR_NAME"]
  network = f"--network bridge={br},model=virtio"
  return f"""
    virt-install
    --boot {"cdrom,hd" if args.bios else "uefi"}
    --virt-type kvm
    --os-variant=win10
    --vcpus {args.cpus},sockets=1
    --cpu host-passthrough
    --memory {args.memory}
    --controller type=scsi,model=virtio-scsi
    --disk path={vmdk},size={args.disk_size},format=raw,sparse=true,bus=scsi,discard=unmap,io=threads,cache=none
    {network}
    --graphics vnc,listen=0.0.0.0
    --video qxl,ram={args.vram}
    --channel unix,target_type=virtio,name=org.qemu.guest_agent.0
    --disk {args.install_media},device=cdrom
    --disk {args.install_drivers},device=cdrom
    --qemu-commandline="-uuid"
    --qemu-commandline="{uuid4()}"
    --name {args.name}
    --check disk_size=off
    {args.extra}
    {"--print-xml --dry-run" if args.dry else ""}
    """


def dump_xml(args: Namespace) -> None:
  vmrc = f"{_vmdk_dir_}/{args.name}.xml"
  xml = call(["virsh", "dumpxml", args.name], capture=True)
  with open(vmrc, "w") as fd:
    fd.write(xml)
  print(xml)


def main() -> None:
  chdir(_install_dir_)
  print("\n" * 10)
  try:
    args = parse()
    vmdk = f"{_vmdk_dir_}/{args.name}.img"
    if isfile(vmdk):
      print(f"ERROR :: {args.name} already exists!", file=stderr)
      exit(1)
    else:
      cmd = install(args, vmdk)
      call(cmd.split())
      dump_xml(args)
  except:
    raise
  finally:
    print("\n" * 10)


main()

